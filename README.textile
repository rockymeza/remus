h1. Remus is a syntax highlighter.

h2. It' s gonna be pretty awesome.

h3. Where did Remus come from?

Remus was inspired by not wanting to do homework, the awesome Python syntax highglighter "pygments":http://pygments.org/, and it takes some ideas from the RubyGem "syntax":http://syntax.rubyforge.org/.

h3. Remus in action?

You could clone Remus and run the @./example@.  (requires ruby--I know it works on 1.9, I don't know about 1.8).

h3. How to use Remus?

What a wonderful yet oddly phrased question.  The basic syntax for Remus is: @Remus.convert( string )@.  This will highlight your string into plain text.  Not super useful, so a better use would be @Remus.convert( string, language )@ (the default language is plain text, perhaps not the most useful of highlighters, nevertheless, you gotta be able to highlight nothing before you can highlight something).  *Nothing is more useful than some examples:*

@Remus.convert( 'This is Plain Text' )
=>@ This is Plain Text

@Remus.convert( '<p>This is HTML</p>', :html )
=>@ &lt;span class=&quot;identifier&quot;&gt;&amp;lt;p&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;&amp;gt;&lt;/span&gt;This is HTML&lt;span class=&quot;identifier&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

h3. How to use Remus more ninja-ly?

@Remus.convert( string, language, { :token_class => :sh } )@ will return output that is colorized for the terminal.

Another feature that is "very exciting or effective":http://idioms.thefreedictionary.com/kick+ass is the embedded languages.  You can have CSS and JS inside of HTML or Language-X inside of Language-Y.

h3. How to make Remus more awesome?

You can add Lexers ( @lang/*.rb@ ) and Tokens ( @lib/tokens/*.rb@ ) to make Remus even smarter.  Follow the example of Html and Js to see how to make a Lexer.
